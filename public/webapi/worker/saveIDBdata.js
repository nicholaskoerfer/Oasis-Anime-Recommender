let db;self.onmessage=async({data})=>{if(!db)await IDBinit();if(data.data!==undefined&&data.name){if(data.name==="selectedFilterSelectionName"&&typeof data.data==="string"){const userFilters=await retrieveJSON("userFilters");let activeTagFilters=userFilters?.activeTagFilters,filterOptions=userFilters?.filterOptions,selectedCustomFilter=userFilters?.selectedCustomFilter;if(!userFilters){filterOptions=await retrieveJSON("filterOptions");activeTagFilters=await retrieveJSON("activeTagFilters");selectedCustomFilter=await retrieveJSON("selectedCustomFilter")}if(filterOptions?.filterSelection instanceof Array&&filterOptions?.filterSelection?.length>0){let foundFilterSelection;filterOptions.filterSelection=filterOptions.filterSelection.map((filterSelection,idx)=>{if(filterSelection.filterSelectionName===data.data){filterSelection.isSelected=true;foundFilterSelection=true}else if(!foundFilterSelection&&idx>=filterOptions.filterSelection.length-1){filterSelection.isSelected=true}else{filterSelection.isSelected=false}return filterSelection});if(activeTagFilters!=null&&selectedCustomFilter!=null){await saveJSON({selectedCustomFilter:selectedCustomFilter,activeTagFilters:activeTagFilters,filterOptions:filterOptions},"userFilters")}}}else{await saveJSON(data.data,data.name)}self.postMessage({message:"success"})}};async function IDBinit(){return await new Promise(resolve=>{request=indexedDB.open("Kanshi.Anime.Recommendations.Anilist.W~uPtWCq=vG$TR:Zl^#t<vdS]I~N70",1);request.onerror=error=>{console.error(error)};request.onsuccess=event=>{db=event.target.result;return resolve()};request.onupgradeneeded=event=>{db=event.target.result;db.createObjectStore("MyObjectStore");let transaction=event.target.transaction;transaction.oncomplete=()=>{return resolve()}}})}async function saveJSON(data,name){return await new Promise(async(resolve,reject)=>{try{let write=db.transaction("MyObjectStore","readwrite").objectStore("MyObjectStore").openCursor();write.onsuccess=async event=>{let put=await db.transaction("MyObjectStore","readwrite").objectStore("MyObjectStore").put(data,name);put.onsuccess=event=>{return resolve()};put.onerror=event=>{return resolve()}};write.onerror=async error=>{console.error(error);return reject()}}catch(ex){console.error(ex)}})}async function retrieveJSON(name){return await new Promise(resolve=>{try{let read=db.transaction("MyObjectStore","readwrite").objectStore("MyObjectStore").get(name);read.onsuccess=()=>{return resolve(read.result)};read.onerror=error=>{console.error(error);return resolve()}}catch(ex){console.error(ex);return resolve()}})}